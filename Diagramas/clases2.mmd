classDiagram
class ALU {
  Valor: int
  psw: dict[str,int]
  ALU()
  +ejecutar_operacion(opcode, operando1, operando2) : None
  +obtener_flags(): dict[str,int]
}
class SimuladorComputador {
  - root: Tk
  - canvas: Canvas
  - cpu: CPU
  - system_buses: InterfazBus
  - main_memory: MemoriaPrincipal
  - memorias: InterfazMemoria
  - io: InterfazIO
  - input_output: EntradasSalidas
  - text_widget: Text
  - instrucciones: list[str]
  - control_signals_text: dict[str, int]

  + SimuladorComputador(root: Tk)
  + crear_componentes() : None
  + crear_distribucion() : None
  + crear_visualizacion_senales_control() : None
  + reiniciar_simulador() : None
  + cargar_instrucciones() : None
  + cargar_instruccion_individual() : None
  + ciclo_busqueda() : None
  + ciclo_ejecucion(opcode, reg1, reg2, op1, op2, senales: dict) : None
  + reiniciar_viaje_datos() : None
  + resaltar_viaje_datos() : None
  + resaltar_viaje_salida() : None
  + ejecutar_todas_las_instrucciones() : None
  + ejecutar_instruccion_individual() : None
}
class UnidadControl {
  -Registro_instruccion : str |none
  UnidadControl()
  +buscar_instruccion(memoria:Memoria, pc:int) -> str
  +decodificar_instruccion() : tuple [str,str,str]
}
class CPU {
  - canvas: Canvas
  - inner_canvas: Canvas
  - alu: ALU
  - register_bank: BancoRegistro
  - pc_register: Registro
  - mar_register: Registro
  - ir_register: Registro
  - mbr_register: Registro
  - alu_visual: Registro
  - psw_register: Registro
  - control_unit: UnidadControl
  - wired_control_unit: UnidadControlCableada
  CPU(canvas:Canvas)
  +reiniciar_componentes() : None
  +actualizar_visualizacion_psw() : None
}
class EntradasSalidas {
  -widget_salida: text
  -banco_registro: bancoRegistro
  -interfaz_memoria: InterfazMemoria
  EntradasSalidas(widget_salida, banco_registro, interfaz_memoria)
  +procesar_instruccion(instruction:str) : None
  +manejar_numero(numero: int) : None
  +manejar_registro(registro:str) : None
  +manejar_direccion_memoria(direccion_memoria:int) : None
  +manejar_invalido(argumento:str) : None
  +actualizar_salida(message:str, clear:bool) : None
}
class InterfazBus {
  InterfazBus(canvas, cpu_height)
  +on_configure(event) : None
  +inicializar_buses() : None
  +dibujar() : None
  +draw_vertical_label(text, x, y, color) : None
  +draw_bus_status(estado, x, y, color) : None
  +crear_conexion_memoria_datos(start, end, color, width) : None
  +crear_conexion_i_o(start, end, color, width) : None
  +crear_conexion_memoria_programa(start, end, color, width) : None
  +actualizar_color_linea(bus_name, new_color) : None
  +highlight_bus(bus_name, color) : None
  +reset_bus_color(bus_name) : None
  +activar_componente(bus_name, componente) : None
  +activar_bus_datos_conexion_io() : None
  +restaurar_color(line) : None
  +activar_bus_direcciones() : None
  +activar_bus_control() : None
  +activar_bus_datos() : None
  +desactivar_bus_direcciones() : None
  +desactivar_bus_control() : None
  +desactivar_bus_datos() : None
}
class InterfazIO {
  InterfazIO(parent, cpu_main)
  +ejecutar_salida() : None
  +cargar_archivo() : None
  +guardar_archivo() : None
}
class InterfazMemoria {
  InterfazMemoria(parent)
  +crear_matriz_dinamica(canvas, matriz, canvas_index) : None
  +actualizar_celda(canvas_index, row, col, texto) : None
  +cargar_instruccion(instruccion) : None
  +store_data(address, value) : None
  +cargardata(address) : None
  +store_instruction(address, value) : None
  +cargar_instruction(address) : None
}
class MainMemoria {
  MainMemoria(canvas)
  +actualizar_visualizacion_memoria(instructiones):list[str] : None
  +reset() : None
}
class Memoria {
  -tamaño : int
  -intruccion_memoria:list [str]
  -dato_memoria: dict[int, Registro]
  Memoria(canvas, x:int, y:int, tamaño:int)
  +cargar_instruccion(direccion:int, valor:str) str
  +guardar_instruccion(direccion:int, valor:str) : None
  +cargar_dato(direccion:int) Registro
  +guardar_dato(direccion:int, valor:int) : None
  +limpiar_registros() : None
}
class Registro {
  -valor: int
  -x: int
  -y: int
  -nombre:string
  -canvas:Canvas
  Registro(canvas:Canvas, x:int, y:int, nombre:str)
  +set_valor(valor:int) : None
}
class bancoRegistro {
  -registros: dict[str, Registro]
  bancoRegistro(canvas, x, y)
  +get_nombre_registro(registro_nombre: str) : None
  +set_nombre_registro(registro_nombre:str, valor:int) : None
  +limpiar_registro() : None
}
class UnidadControlCableada {
  - señales_control: dict[str, bool | str | None]
  - registro_instruccion: str
  - canvas_principal: Canvas
  - canvas_interno: Canvas
  + UnidadControlCableada(canvas_principal: Canvas)
  + inicializar_canvas_interno() : None
  + buscar_instruccion(memoria: Memoria, pc: int) : str
  + decodificar_instruccion() : (str, str, str)
  + generar_senales_control(opcode: str) : dict
  + actualizar_visualizacion_senales() : None
}

EntradasSalidas <-- SimuladorComputador
InterfazBus <-- SimuladorComputador
MainMemoria <-- SimuladorComputador
CPU <-- SimuladorComputador
InterfazIO <-- SimuladorComputador
InterfazMemoria <-- SimuladorComputador
UnidadControl --> Memoria
Memoria --> MainMemoria
Registro -- Memoria
Registro <-- bancoRegistro
CPU --> ALU
CPU --> bancoRegistro
CPU --> Registro
CPU --> UnidadControl
EntradasSalidas --> bancoRegistro
EntradasSalidas --> InterfazMemoria
UnidadControlCableada --> Memoria